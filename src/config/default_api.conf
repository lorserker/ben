[models]
name = GIB as on BBO
# Model version 1 drops state for bidding, and introduce different system for NS and EW
# Model version 2 includes 4 bids when making the lookup
model_version = 3

# Small cards (pips) are grouped, so when bidding we have AKQJTx
n_cards_bidding = 24
# During play we have AKQJT98x
n_cards_play = 32

# Version of tensorflow to use
tf_version = 2
# Same system for both sides
NS = 1
EW = 1
# If using BBA the following NS and EW must match BBA's systems (0 =2/1, 1=SAYC, 2=WJ, 3=PC, 4=Acol)
use_bba = False
consult_bba = True
use_bba_rollout = True
# Instead of the neural network, check BBA if it is RKC and get the correct bid from BBA
use_bba_to_count_aces = True
# Use 2/1 in BBA
bba_our_cc = BBA/CC/GIB-BBO.bbsa
bba_their_cc = BBA/CC/GIB-BBO.bbsa
# Playing matchpoint? Otherwise it is teams
matchpoint = False
# Do not print warnings about bad models, training etc in the output
suppress_warnings = True

[contract]
contract = models/TF2models/Contract_2024-12-09-E50.keras
trick = models/TF2models/Tricks_2024-12-09-E50.keras

[bidding]
bidder = models/TF2models/GIB-BBO-8730_2025-04-19-E30.keras
# only used for sampling
opponent = models/TF2models/GIB-BBO-8730_2025-04-19-E30.keras
info =  models/TF2models/GIB-BBOInfo-8730_2025-04-19-E30.keras
# If there are multiple bids over this threshold make a simulation for the bids, using an array we can lower the trust the more we bid
search_threshold = [0.10, 0.07, 0.06, 0.05, 0.04, 0.03, 0.03]
# Adjust hcp - upvote ace and T
adjust_hcp = False
# If there is bid above this threshold, make that bid ignoring other bids
no_search_threshold = 1
# Evaluate min_passout_candidates bids if auction longer than this. Setting to -1 will disable
# Disabled with a descending search_threshold
eval_after_bid_count = -1
# If False the opening bid will be without simulation, even with multiple candidates
# With relatively high trust for first bid, this should be OK
eval_opening_bid = True
# Add Pass as a bid to evaluate after this number of bids
# Disabled when we have rescue bid activated
eval_pass_after_bid_count = -1
# Minimum number of candidates examined in the passout situation
min_passout_candidates = 2
# Use bidding quality in evaluation (if not good just use neural network)
use_biddingquality = True
# For very long bidding sequnces we can't find decent samples, so do not make quality check
no_biddingquality_after_bid_count = 12
# Upvote the samples that matches the bidding best - used when double dummy results are calculated during play
use_probability = True
# Before the final pass validate the contract with a neural network
check_final_contract = True
# How many samples checked
max_samples_checked = 20
# Minimum gain for making a rescue bid, normally we only care about slams and wrong games
min_rescue_reward = 500
# Max expected score to evaluate rescue bid
max_estimated_score = 1430
# If samples has bidding below this we will not use it for rescue bid
min_bidding_trust_for_sample_when_rescue = 0.55
# Alert implemented in bidding model
alert_supported = False
# We only alert if we are pretty sure
alert_threshold = 0.8

[adjustments]
# Are adjustments enabled
use_adjustment = True
# Add extra weigth on scores from neural network
# The score from NN is multiplied to this and added to expected score
adjust_NN = 60
# The score from NN is multiplied to this and added to expected score, when undisturbed, we trust the NN more
adjust_NN_undisturbed = 200

# If it was difficult to find samples we increase the trust in the NN
adjust_NN_Few_Samples = 100
# subtract this from expected score before XX (Double if vulnerable)
adjust_XX = 200
# Subtract this from expected score before double in passout situation
# If not going 2 down, the adjustment is doubled
adjust_X = 100
# When doubling in passout situation remove xx% the best boards, due to bad samples 
adjust_X_remove = 25
# When bidding in the passout situation, we change the expected score
adjust_passout = -100
# When bidding in the passout and going negative add this multiplyed to the score as and adjustment
adjust_passout_negative = 0.5

# If we get some very low scores from the NN, then adjust by this
# Both will be tested, so a very low score will get both adjustments
adjust_min1 = 0.002
adjust_min2 = 0.0002
adjust_min1_by = 200
adjust_min2_by = 200
# Adjustment above is in points, so we need to translate it to some kind of MP or Imp
factor_to_translate_to_mp = 10
factor_to_translate_to_imp = 25
# Try to adjust the suit to play based on evaluation of the suit
use_suit_adjust = True
# Reward for leading partners suit
reward_lead_partner_suit = 0.5
# Penalty for leading trump with singleton K could be added
trump_lead_penalty = [0.2, 0.2, 0.5, 0.2]

[lead]
# Neural network for suggesting opening lead
lead_suit = models/TF2models/Lead-Suit_2024-11-04-E200.keras
lead_nt = models/TF2models/Lead-NT_2024-11-04-E200.keras
# Ignore cards as opening lead below this value from the neural network
lead_threshold = 0.20
# Lead this card suggested by neural network if prediction is over this value
lead_accept_nn = 0.999
# Use double dummy statistics when evaluating the opening lead - default is single dummy
double_dummy = True
# Force a minimum number of leads to consider - overrides lead_threshold
min_opening_leads = 4
# Opening lead agreement (random, attitude, 135 or 24)
lead_from_pips_nt = 24
lead_from_pips_suit = 135
# use real calcualtion or just tricks
use_real_imp_or_mp_opening_lead = True
# Validate opening lead against lead convention
lead_convention = False

[eval]
# Model for finding single dummy estimates provided an opening lead
single_dummy_estimator = models/TF2models/SD_2024-07-08-E20.keras
# Model for finding single dummy estimates without opening lead
double_dummy_estimator = models/TF2models/RPDD_2024-07-08-E02.keras
# use the following estimator, sde, dde, both or none. If both dde will be preferred
estimator = none
# Use double dummy when estimating tricks during bidding - to slow if 200 samples - higher priority than the above estimators
double_dummy_calculator = True
# use real calculation or just tricks - this is only working for double dummy calculator due to performance
use_real_imp_or_mp_bidding = True

[cardplay]
# This is telling if opening lead is included in the neural net for lefty
opening_lead_included = True
lefty_nt = models/TF2models/lefty_nt_2024-07-08-E20.keras
dummy_nt = models/TF2models/dummy_nt_2024-07-08-E20.keras
righty_nt = models/TF2models/righty_nt_2024-07-16-E20.keras
decl_nt = models/TF2models/decl_nt_2024-07-08-E20.keras
lefty_suit = models/TF2models/lefty_suit_2024-07-08-E20.keras
dummy_suit = models/TF2models/dummy_suit_2024-07-08-E20.keras
righty_suit = models/TF2models/righty_suit_2024-07-16-E20.keras
decl_suit = models/TF2models/decl_suit_2024-07-08-E20.keras
# Number of samples when playing the hand
sample_hands_play = 200
# Minimum number of boards we want returned for sampling during play
min_sample_hands_play = 20
# Minimum number of boards we want returned for sampling during play
min_sample_hands_play_bad = 12
# Number of samples we will generate to find sample_hands_play
sample_boards_for_play = 5000
# If number of unknown cards is less than this we will not sample but just generate all combinations
max_unknown_cards_for_sampling = 14
# Should possible claim be calculated
claim = True
# Use bidding info for sampling during play and bidding
# Setting this to false will require a higher number of generated deals
use_biddinginfo = True
# Use bidding quality in evaluation, if bad samples, just use neural network
use_biddingquality_in_eval = True
# Use SuitC to find the card for single suit combinations
use_suitc = True
# Only check trump in suit contracts (and all suits in NT)
suitc_sidesuit_check = True
# Select the card from SuitC even if different from DD. Problem is DD always find the queen
force_suitc = True
# Use real IMP or MP when finding the play - original version used average tricks
use_real_imp_or_mp = True
# Drawing trump, reward is given if opponents has trump, penalty if not
# The reward is low as it is only useable if more cards with the same score
draw_trump_reward = 0.1
draw_trump_penalty = 0.1
# Reward play if NN score is higher than this. Setting to -1 disable the check. Adjustment is NN score * factor
play_reward_threshold_NN = 0.8
play_reward_threshold_NN_factor = 0.2
# At this trick we check if any of the remaing card should have been played earlier for each sample. If so we reduce probability
check_remaining_cards = 5
# Probability for discards with each sample
check_discard = True

[pimc]
# Setting this to false will suppress output from PIMC, if true it will follow the global defintion of verbose
pimc_verbose = False
# Are we using PIMC as declarer and/or defender? 
pimc_use_declaring = True
pimc_use_fusion_strategy = False
pimc_use_defending = True
# Use PIMC when discarding
pimc_use_discarding = False
# Max wait time for results from PIMC in seconds
pimc_wait = 3
# When should PIMC kick in. PIMC is best with few cards unknown, but is used as a second opinion to BENs Double dummy
pimc_start_trick_declarer = 1
pimc_start_trick_defender = 1
pimc_stop_trick_declarer = 13
pimc_stop_trick_defender = 13
# Extract hcp from samples and use as input to PIMC
pimc_constraints = True
# On every trick create new constraints based on samples. If false only do it, when PIMC kicks in
# The API is stateless and will establish constraints at each trick
pimc_constraints_each_trick = True
# Stop evaluation after finding the number of playouts unless pimc_wait expires before
pimc_max_playouts = 200
# Max number of threads PIMC is allowed to use
pimc_max_threads = 12
# If singleton, just play it without evaluating it
autoplaysingleton = True
# PIMC trust NN. We can filter away play, that is not suggested by the neural network
pimc_trust_NN = 0.00 
# Combine with BEN double dummy
pimc_ben_dd_declaring = True
pimc_ben_dd_defending = True
# When merging results we can trust one side more. Default is 0.5. The weight is for PIMC, so the higher the more trust in PIMC
# If bidding quality is below the threshold, we will trust PIMC more, as BENs samples do not match the bidding.
# Currently 50-50
pimc_bidding_quality = 0.1
# Weight for PIMC, when BEN has better samples
pimc_ben_dd_declaring_weight = 0.25
pimc_ben_dd_defending_weight = 0.25
# When they preempt, they might not have the length BEN would have, so we use PIMC
pimc_after_preempt = True
pimc_after_preempt_weight = 0.75
# Use a priori probabilities

# Setting this to true will send all played card to PIMC. that will give weight to each sample, when creating average tricks
# and when calculating chance for making/defeating the contract
pimc_apriori_probability = False
# These margins are added before calling OIMC to be sure we get some deals, that does not match the bidding entirely
pimc_margin_suit = 1
pimc_margin_hcp = 3
pimc_margin_suit_bad_samples = 2
pimc_margin_hcp_bad_samples = 5

[sampling]
# When sampling we use bidding_info as a guide, and these control how to adjust bidding_info after a card given to a hand
# Multiplied to the hcp-value of the card, the higher value there more the samples will have the average hcp's
# This can be disable by setting use_biddinginfo to false
hcp_reduction_factor = 0.83
# when a card is given subtract this from the shape, to reduce odds it get more in that suit            
shp_reduction_factor = 0.3
# If bid selected directly by Neural net, then save time dropping generating samples
no_samples_when_no_search = True
# Filter to remove hands, where the opening lead was not suggested by the neural network
# setting the following to false is the default behavior from a 32 card deck
# lead_accept_threshold_suit will sum all lead, including honors, for each suit and check the suit lead, adding up the score
lead_accept_threshold_suit = False
# lead_accept_threshold_honors will switch to the 24 deck suit, when validating the lead
# if following lead conventions like 2nd from 3 this should be enabled
lead_accept_threshold_honors = True
# Can be disabled by setting it to zero. This is a filter, so we keep ot low, as any lead can be possible
lead_accept_threshold = 0.10
# Alternative is
# if following lead conventions like 2nd from 3 this should be enabled
# lead_accept_threshold_honors = False
# Can be disabled by setting it to zero. This is a filter, so we keep ot low, as any lead can be possible
# lead_accept_threshold = 0.01

# If we play with our normal partner we can add some trust to the lead
# Setting it to high will reduce the samples and thus getting bad samples
lead_accept_threshold_partner_trust = 0.10

# Filter to remove hands, where we do not trust the bidding. Used when sampling hands during bidding and opening lead
#use_distance = False
#bidding_threshold_sampling = 0.25
#bid_accept_threshold_bidding = 0.20
#bid_accept_play_threshold = 0.4
# This is calculated using euclidian distance, so 0.33 could be one of the 3 bids in a bidding round matching
use_distance = True
bidding_threshold_sampling = 0.70
# If not finding enough samples above bidding_threshold_sampling we extend to this, until we get min_sample_hands_auction
bid_accept_threshold_bidding = 0.40
# Filter to remove hands not consistent with the bidding. Used during play
bid_accept_play_threshold = 0.40

# Filter to remove hands, where the play is inconsistent with the sample. Setting it to zero will remove the validation
# This is difficult, as setting it to low will include boards where BEN not will repeat a finesse, but setting it to high might reduce useable samples
# Also important to notice, this is not used for PIMC as defender or declarer
play_accept_threshold_opponents = 0.03
play_accept_threshold_partner = 0.1
# How much do we trust declares play
play_accept_threshold_declarer = 0.1
min_play_accept_threshold_samples = 10
# If we dont find enough samples, then include down to this threshold. Used during play
bid_extend_play_threshold = 0.01
# Number hands where we will calculate scores for when bidding
sample_hands_auction = 200
# The number of hands we will generate to find sample_hands_auction. Estimated cost pr. sample is 4ms
# This is now a max as we generate blocks of sample_boards_for_auction_step hands
sample_boards_for_auction = 30000
sample_boards_for_auction_step = 2000
# After each real bid we add 50% to the max samples. setting to zero disables
increase_for_bid_count = 6
# If samples below this threshold print a warning in the log
warn_to_few_samples = 10
# Minimum number of hands when caclulating scores in the bidding
min_sample_hands_auction = 15
# If we dont find enough samples, then include down to this threshold. Used during bidding
bid_extend_bid_threshold = 0.01
# How many boards should we sample to find the number of samples below
sample_boards_for_auction_opening_lead = 20000
# Number of samples made, when finding the opening lead
sample_hands_opening_lead = 200
# Max number of samples to include when reviewing a board
sample_hands_for_review = 20
# If probability for a bid is below this, then drop the sample
exclude_samples = 0.01
# Skip last bidding round to find samples, if we did not find the minimum needed. We will only try to find 25% samples
sample_previous_round_if_needed = True
