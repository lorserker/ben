[models]
name = SAYC UCBC
# Model version 1 drops state for bidding, and introduce different system for NS and EW
# Model version 2 includes 4 bids when making the lookup
model_version = 2
# Version of tensorflow to use
tf_version = 1
# NS is SAYC and EW is WBridge5 with SAYC
NS = 1
EW = 99
# If using BBA the following NS and EW must match BBA's systems (0 =2/1, 1=SAYC, 2=WJ, 3=PC, 4=Acol)
use_bba = False
# Use SAYC in BBA
bba_ns = BBA/CC/BEN-Sayc.bbsa
bba_ew = BBA/CC/BEN-Sayc.bbsa

[contract]
contract = models/contract/contract-193200

[bidding]
bidder = models/UCBC2024/NS1EW99-bidding_V2-3125000
info = models/UCBC2024/NS1EW99-binfo_V2-3125000
# If there are multiple bids over this threshold make a simulation for the bids. -1 will just take highest
search_threshold = 0.07
# If there is bid above this threshold, make that bid ignoring other bids
no_search_threshold = 0.999
# Evaluate min_passout_candidates bids if auction longer than this. Setting to -1 will disable
eval_after_bid_count = 12
# If False the opening bid will be without simulation, even with multiple candidates
eval_opening_bid = False
# Add Pass as a bid to evaluate after this number of bids
eval_pass_after_bid_count = 12
# Minimum number of candidates examined in the passout situation
min_passout_candidates = 2
# Use bidding quality in evaluation (if not good just use neural network)
use_biddingquality = True
# Upvote the samples that matches the bidding best - used when double dummy results are calculated during play
use_probability = True
# Before the final pass validate the contract with a neural network
check_final_contract = True
# How many samples checked
max_samples_checked = 20
# Minimum gain for making a rescue bid
min_rescue_reward = 250
# Max expected score to evaluate rescue bid
max_estimated_score = 300
# Alert implemented in bidding model
alert_supported = False

[adjustments]
# Are adjustments enabled
use_adjustment = False
# Add extra weigth on scores from neural network
# The score from NN is multiplied to this and added to expected score
adjust_NN = 50
# If it was difficult to find samples we increase the trust in the NN
adjust_NN_Few_Samples = 500
# subtract this from expected score before XX (Double if vulnerable)
adjust_XX = 200
# Subtract this from expected score before double in passout situation
# If not going 2 down, the adjustment is doubled
adjust_X = 100
# When bidding in the passout situation, we change the expected score
adjust_passout = -100
# When bidding in the passout and going negative, assume we are being doubled, so multiply the score by this
adjust_passout_negative = 3
# If we get some very low scores from the NN, then adjust by this
# Both will be tested, so a very low score will get both adjustments
adjust_min1 = 0.002
adjust_min2 = 0.0002
adjust_min1_by = 200
adjust_min2_by = 200

[lead]
# Neural network for suggesting opening lead
lead_suit = models/lead/lead_suit-999000
lead_nt = models/lead/lead_nt-475000
# Ignore cards as opening lead below this value from the neural network
lead_threshold = 0.10
# Lead this card suggested by neural network if prediction is over this value
lead_accept_nn = 0.999
# Use double dummy statistics when evaluating the opening lead - default is single dummy
double_dummy = True
# Force a minimum number of leads to consider - overrides lead_threshold
min_opening_leads = 3
# Opening lead agreement (random, attitude, 135 or 24)
lead_from_pips_nt = random
lead_from_pips_suit = random

[eval]
# Model for finding single dummy estimates provided an opening lead
single_dummy_estimator = models/lr3_model/lr3-1000000
# Model for finding single dummy estimates without opening lead
double_dummy_estimator = models/single_dummy/single_dummy-32768000
# use the following estimator, sde, dde or both
estimator = dde
# Use double dummy when estimating tricks during bidding - to slow if 200 samples
double_dummy_calculator = True

[cardplay]
# This is telling if opening lead is included in the neural net for lefty
opening_lead_included = True
lefty_nt = models/playing/lefty_nt-475000
dummy_nt = models/playing/dummy_nt-475000
righty_nt = models/playing/righty_nt-475000
decl_nt = models/playing/decl_nt-475000
lefty_suit = models/playing/lefty_suit-999000
dummy_suit = models/playing/dummy_suit-999000
righty_suit = models/playing/righty_suit-999000
decl_suit = models/playing/decl_suit-999000
# Number of samples when playing the hand
sample_hands_play = 200
# Minimum number of boards we want returned for sampling during play
min_sample_hands_play = 10
# Minimum number of boards we want returned for sampling during play
min_sample_hands_play_bad = 10
# Number of samples we will generate to find sample_hands_play
sample_boards_for_play = 5000
# Should possible claim be calculated
claim = True
# Use bidding info during play
use_biddinginfo = True
# Use bidding quality in evaluation, if bad samples, just use neural network
use_biddingquality_in_eval = True
# Use SuitC to find the card for single suit combinations
use_suitc = True
# Only check trump in suit contracts (and all suits in NT)
suitc_sidesuit_check = False
# Drawing trump, reward is given if opponents has trump, penalty if not
# The reward is low as it is only useable if more cards with the same score
draw_trump_reward = 0.05
draw_trump_penalty = 0.1

[pimc]
# Are we using PIMC as declarer or defender? 
pimc_use_declaring = True
pimc_use_defending = True
# Max wait time for results from PIMC in seconds
pimc_wait = 3
# When should PIMC kick in
pimc_start_trick_declarer = 4
pimc_start_trick_defender = 8
# Extract hcp from samples and use as input to PIMC
pimc_constraints = True
# On every trick create new constraints based on samples. If false only do it, when PIMC kicks in
# The API is stateless and will establish constraints at each trick
pimc_constraints_each_trick = False
# Stop evaluation after finding the number of playouts unless pimc_wait expires before
pimc_max_playouts = 400
# Max number of threads PIMC is allowed to use
pimc_max_threads = 6
# If singleton, just play it without evaluating it
autoplaysingleton = True
# PIMC trust NN
pimc_trust_NN = 0.00

[sampling]
# When sampling we use bidding_info as a guide, and these control how to adjust bidding_info after a card given to a hand
# Multiplied to the hcp-value of the card
hcp_reduction_factor = 0.83
# when a card is given subtract this from the shape, to reduce odds it get more in that suit            
shp_reduction_factor = 0.5
# If bid selected directly by Neural net, then save time dropping generating samples
no_samples_when_no_search = True
# Filter to remove hands, where the opening lead was not suggested by the neural network
# Can be disabled by setting it to zero
lead_accept_threshold = 0.03
# If we play with our normal partner we can add som trust to the lead
# Setting it to high will reduce the samples and thus getting bad samples
lead_accept_threshold_partner_trust = 0.05
# Filter to remove hands, where we do not trust the bidding. Used when sampling hands during bidding
#use_distance = False
#bidding_threshold_sampling = 0.25
#bid_accept_threshold_bidding = 0.20
# This is calculated using euclidian distance, so 0.33 could be one of the 3 bids in a bidding round matching
use_distance = True
bidding_threshold_sampling = 0.70
bid_accept_threshold_bidding = 0.40
# Filter to remove hands not consistent with the bidding. Used during play
bid_accept_play_threshold = 0.40

# Filter to remove hands, where the play is inconsistent with the sample
play_accept_threshold = 0.03
# If we dont find enough samples, then include down to this threshold. Used during play
bid_extend_play_threshold = 0.10
# Number hands where we will calculate scores for when bidding
sample_hands_auction = 200
# The number of hands we will generate to find sample_hands_auction
sample_boards_for_auction = 5000
# Minimum number of hands when caclulating scores in the bidding
min_sample_hands_auction = 20
# If we dont find enough samples, then include down to this threshold. Used during bidding
bid_extend_bid_threshold = 0.01
# How many boards should we sample to find the number of samples below
sample_boards_for_auction_opening_lead = 50000
# Number of samples made, when finding the opening lead
sample_hands_opening_lead = 200
# Max number of samples to include when reviewing a board
sample_hands_for_review = 20
